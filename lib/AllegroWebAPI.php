<?phpclass GjmaaAllegroWebApi {    protected $webApi = 'fcacc5a4';    public $session = null;    protected $client = null;	protected $version = array();    public $error = false;    public $error_mess = '';    public $error_code = '';	protected $countryCode = 1;		public $countryDetails = array(		1 => array (			'site' => 'allegro.pl',			'currency' => 'zł'		)//		56 => array (//			'site' => 'aukro.cz',//			'currency' => 'Kč'//		),//		93 => array (//			'site' => 'vatera.hu',//			'currency' => 'Ft'//		),//		168 => array (//			'site' => 'molotok.ru',//			'currency' => 'руб'//		),//		209 => array (//			'site' => 'aukro.ua',//			'currency' => 'грн'//		)	);		public $userLogin = array();        const random = 0;    const asc = 1;    const desc = 2;    public function __construct($country = null,$webapi = null,$login = null,$password = null) {        try {			if($country) $this->setCountry($country);			if(!empty($webapi)){				$this->webApi = $webapi;			}            $this->error = false;            $this->client = new SoapClient('https://webapi.'.$this->countryDetails[$this->getCountry()]['site'].'/service.php?wsdl');			if(!empty($login)){				if(!empty($password)){					$version = $this->client->doQueryAllSysStatus(						array(							'countryId'=>$this->countryCode,							'webapiKey'=>$this->webApi						)					);										$this->_saveVersion($version);					$this->session = $this->client->doLoginEnc(						array(							'userLogin' => $login, 							'userHashPassword' => $password,							'countryCode' => $this->countryCode,							'webapiKey' => $this->webApi,							'localVersion' => $this->version[$this->countryCode]->verKey						)					);				}			}        } catch(SoapFault $error){            $this->client = null;            $this->session = null;            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->faultcode;            return null;        }    }		private function _saveVersion($version){        $versions = is_array($version->sysCountryStatus->item) ? $version->sysCountryStatus->item : [$version->sysCountryStatus->item];		foreach($versions as $item){			$this->version[$item->countryId] = $item;		}	}		public function setCountry($country) {		$this->countryCode = $country;	}		public function getCountry() {		return $this->countryCode;	}    public function doGetMySellItems($sort_items = null,$number_of_items = 5,$category_allegro = 0) {        try{            $this->error = false;						$request = array(				'sessionId' => $this->session->sessionHandlePart,				'pageSize' => $number_of_items			);            $sort_array_items = array();            $sorting = null;						if($sort_items != null){                $sort_array_items = explode('_',$sort_items);            }            if(isset($sort_array_items) && !empty($sort_array_items) && $sort_array_items[0] != 0){                $sorting = array();                $sorting['sortType'] = $sort_array_items[0];                $sorting['sortOrder'] = $sort_array_items[1] == 'asc' ? self::asc : self::desc;				$request['sortOptions'] = $this->_migrateOldSortToNew($sorting);            }            return $this->client->doGetMySellItems($request);        } catch(SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }        public function getUserID($login){		        try{            $this->error = false;			$user = $this->client->doGetUserID(				array(					'countryId' => $this->countryCode,					'userLogin' => $login,					'userEmail' => '',					'webapiKey' => $this->webApi				)			);            return $user->userId;        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }		public function getUserLogin($userId){        try{            $this->error = false;			$user = $this->client->doGetUserLogin(				array(					'countryId' => $this->countryCode,					'userId' => $userId,					'webapiKey' => $this->webApi				)			);			$this->userLogin[$userId] = $user->userLogin;			return $this->userLogin[$userId];        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }        public function getUserItems($count_of_item,$sort,$filters){        try{            $this->error = false;			$result = array('resultSize' => $count_of_item,'resultOffset' => 0);            return $this->doGetSearchItems($filters,$sort,$result);        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }		public function doGetMyData($session){		try{			$this->error = false;			return $this->client->doGetMyData($this->session['session-handle-part']);		} catch (SoapFault $error) {			$this->error = true;			$this->error_mess = $error->getMessage();			$this->error_code = $error->getCode();		}	}		public function doGetSearchItems($filters,$sort = array(),$result = array()){ 		try { 			$this->error = false;			$requestFilter = $this->_prepareFilters($filters);						$request = array(				'webapiKey' => $this->webApi,				'countryId' => $this->countryCode,				'filterOptions' => $requestFilter,				'resultScope' => 3			);						if(isset($sort) AND !empty($sort)){				$request['sortOptions'] = $this->_migrateOldSortToNew($sort);			}						if(isset($result) AND !empty($result)){				if($result['resultSize'] > 1000)					$result['resultSize'] = 1000;				$request['resultSize'] = $result['resultSize'];				$request['resultOffset'] = $result['resultOffset'];			}						return $this->client->doGetItemsList($request);		} catch(SoapFault $error) { 			$this->error = true;			$this->error_mess = $error->getMessage();			$this->error_code = $error->getCode();		}	}	private function _prepareFilters($filters) {		$filtersOrder = array(			'userId' => 'int',			'category' => 'int',			'search' => 'string'		);		$requestFilter = array();		$filterC = 0;		foreach($filters as $index => $item) {			if($index == 'userId')				$item = $item === null ? null : (is_int($item) ? $item : $this->getUserID($item));			if(empty($item))				continue;			$requestFilter[$filterC]['filterId'] = $index;			$requestFilter[$filterC]['filterValueId'][] = $item;			$filterC++;		}				return $requestFilter;	}		private function _migrateOldSortToNew($sort,$type = 'search') {				$sortType = array(			1 => 'endingTime',			2 => 'relevance',			4 => 'price',			8 => 'name',            16 => 'startingTime'		);				$sortOrder = array(			0 => 'asc',			1 => 'desc'		);				foreach($sort as $index => $item){			$sort[$index] = ${$index}[$item];		}				return $sort;	}		public function getPrice($prices) {		foreach($prices->item as $index => $item){			switch($item->priceType):				case 'buyNow': 					return $item->priceValue;				case 'bidding':					return $item->priceValue;				default:					continue;			endswitch;		}				return 0;	}	public function convertSecondsToHumanTime($time){		$minute = 60;		$hour = 60*60;		$day = 60*60*24;		$humanTime = new stdClass;		if($time >= $day){			$humanTime->number = number_format(floor($time / $day),0,'','');			$humanTime->period = 'days';		} elseif($time < $day AND $time >= $hour){			$humanTime->number = number_format(floor($time / $hour),0,'','');			$humanTime->period = 'hours';		} elseif($time < $hour AND $time >= $minute){			$humanTime->number = number_format(floor($time / $minute),0,'','');			$humanTime->period = 'minutes';		} else {			$humanTime->number = 0;			$humanTime->period = 'minutes';		}		$r1=$humanTime->number % 100;		if ($r1 == 1 && $humanTime->number < 100){			switch($humanTime->period){				case 'minutes': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_MINUTE'); break;				case 'hours': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_HOUR'); break;				case 'days': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_DAY'); break;			}		} else {			$r2=$r1 % 10;			if (($r2 > 1 && $r2 < 5) && ($r1 < 12 || $r1 > 14)){				switch($humanTime->period){					case 'minutes': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_MINUTES2'); break;					case 'hours': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_HOURS2'); break;					case 'days': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_DAYS'); break;				} 			} else {				switch($humanTime->period){					case 'minutes': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_MINUTES'); break;					case 'hours': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_HOURS'); break;					case 'days': $time_to_end = $humanTime->number . ' ' . JText::_('MOD_GJALLEGRO_DAYS'); break;				} 			}		}			return $time_to_end;	}	public function getUserData($login){		try{            $this->error = false;            return $this->client->doShowUser(				array(					'webapiKey' => $this->webApi,					'countryId' => $this->countryCode,					'userLogin' => $login				)			);        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }	}		public function switchTextPoints($rating){		$text = '';		$r1=$rating % 100;		if ($r1 == 1 && $rating < 100){			$text = 'MOD_GJALLEGRO_POINT';		} else {			$r2=$r1 % 10;			if (($r2 > 1 && $r2 < 5) && ($r1 < 12 || $r1 > 14)){				$text = 'MOD_GJALLEGRO_POINTS';			} else {				$text = 'MOD_GJALLEGRO_POINTS2';			}		}		return $text;	}		public function switchRatingToImage($rating){		if($rating > 12500){			$class_image = 'blue_star_allegro';		} elseif($rating <= 12500 AND $rating > 2500) {			$class_image = 'gold_star_allegro';		} elseif($rating <= 2500 AND $rating > 250) {			$class_image = 'silver_star_allegro';		} elseif($rating <= 250 AND $rating > 50) {			$class_image = 'brown_star_allegro';		} elseif($rating <= 50 AND $rating > 5) {			$class_image = 'white_star_allegro';		} else {			$class_image = 'green_leaf_allegro';		}				return $class_image;	}		public function getCategories($country = null){		try{            $this->error = false;			if($country) $this->setCountry($country);            return $this->client->doGetCatsData(                array (                    'countryId' => $this->countryCode,                    'localVersion' => null,                    'webapiKey'=>$this->webApi                )            );        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }	}		public function getCategoryById($id){		try{            $this->error = false;            return $this->client->doGetCategoryPath(				array(					'sessionId' => $this->session->sessionHandlePart,					'categoryId' => $id				)			);        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }	}		public function getItemAuction($id_auction){		try {			$this->error = false;            $request = array(                'sessionHandle' => $this->session->sessionHandlePart,                'itemsIdArray' => $id_auction,                'getImageUrl' => 1,                'getDesc' => 1,                'getAttribs' => 1,                'getPostageOptions' => 1,                'getCompanyInfo' => 1            );			return $this->client->doGetItemsInfo(                $request			);		} catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }	}    public function getMySellRatings(){        try {            $this->error = false;            $request = array(                'sessionHandle' => $this->session->sessionHandlePart            );            return $this->client->doGetMySellRating(                $request            );        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }    public function getFeedback($user_id){        try {            $this->error = false;            $request = array(                'sessionHandle' => $this->session->sessionHandlePart,                'feedbackFrom' => 0,                'feedbackTo' => $user_id            );            return $this->client->doGetFeedback(                $request            );        } catch (SoapFault $error) {            $this->error = true;            $this->error_mess = $error->getMessage();            $this->error_code = $error->getCode();        }    }		public function getAllImages($images){		$convertedImages = array();		foreach($images as $image){			if($image->photoIsMain){				$convertedImages[$image->photoSize] = $image->photoUrl;			}		}				return $convertedImages;	}}